name: Build libtcc (shared) - windows / linux / alpine / msvc

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  TCC_REPO: https://github.com/TinyCC/tinycc.git
  TCC_REF: mob

jobs:
  build-linux:
    name: Build on Linux (configure / make / install -> dist)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps (Ubuntu)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential git autoconf automake bison flex pkg-config

      - name: Configure, build and install into workspace/dist
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -e
          git clone --depth 1 --branch "${{ env.TCC_REF }}" "${{ env.TCC_REPO }}" tinycc
          cd tinycc
          # install into workspace/dist so the layout is predictable
          mkdir -p "${GITHUB_WORKSPACE}/dist"
          ./configure --prefix="${GITHUB_WORKSPACE}/dist"
          make -j"$(getconf _NPROCESSORS_ONLN)"
          make install

          # ensure libtcc.so is present in dist/lib
          ls -la "${GITHUB_WORKSPACE}/dist/lib" || true
          ls -la "${GITHUB_WORKSPACE}/dist/include" || true

      - name: Prepare artifact layout (exact names/dirs)
        run: |
          set -e
          # root libtcc.so (exact name)
          if [ -f "${{ github.workspace }}/dist/lib/libtcc.so" ]; then
            cp -v "${{ github.workspace }}/dist/lib/libtcc.so" "${{ github.workspace }}/libtcc.so"
          else
            # still try to find any libtcc*.so*
            SO="$(find "${{ github.workspace }}/dist/lib" -maxdepth 1 -type f -name 'libtcc*.so*' -print -quit || true)"
            if [ -n "$SO" ]; then
              cp -v "$SO" "${{ github.workspace }}/libtcc.so"
            fi
          fi

          # include/ and lib/ come from dist
          rm -rf include lib || true
          cp -r "${{ github.workspace }}/dist/include" "./include" || true
          cp -r "${{ github.workspace }}/dist/lib" "./lib" || true

          # Ensure lib contains compiled objects / archives (not .c)
          echo "lib contents:"
          ls -la ./lib || true
          echo "include contents:"
          ls -la ./include || true

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-linux
          path: |
            libtcc.so
            include/
            lib/

  build-alpine:
    name: Build on Alpine (configure / make / install -> dist)
    runs-on: ubuntu-latest
    container:
      image: alpine:3.20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps (Alpine)
        run: |
          apk update
          apk add --no-cache build-base git autoconf automake bison flex pkgconfig bash

      - name: Configure, build and install into workspace/dist
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -e
          git clone --depth 1 --branch "${{ env.TCC_REF }}" "${{ env.TCC_REPO }}" tinycc
          cd tinycc
          mkdir -p "${GITHUB_WORKSPACE}/dist"
          ./configure --prefix="${GITHUB_WORKSPACE}/dist"
          make -j"$(getconf _NPROCESSORS_ONLN)"
          make install

          ls -la "${GITHUB_WORKSPACE}/dist/lib" || true
          ls -la "${GITHUB_WORKSPACE}/dist/include" || true

      - name: Prepare artifact layout (exact names/dirs)
        run: |
          set -e
          if [ -f "${{ github.workspace }}/dist/lib/libtcc.so" ]; then
            cp -v "${{ github.workspace }}/dist/lib/libtcc.so" "${{ github.workspace }}/libtcc.so"
          else
            SO="$(find "${{ github.workspace }}/dist/lib" -maxdepth 1 -type f -name 'libtcc*.so*' -print -quit || true)"
            if [ -n "$SO" ]; then
              cp -v "$SO" "${{ github.workspace }}/libtcc.so"
            fi
          fi

          rm -rf include lib || true
          cp -r "${{ github.workspace }}/dist/include" "./include" || true
          cp -r "${{ github.workspace }}/dist/lib" "./lib" || true

          echo "lib contents (should be compiled objects / archives):"
          ls -la ./lib || true
          echo "include contents:"
          ls -la ./include || true

      - name: Upload Alpine artifact
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-alpine
          path: |
            libtcc.so
            include/
            lib/

  build-windows-mingw:
    name: Build on Windows (MinGW, installs to dist)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            make
            git
            autoconf
            automake
            bison
            flex

      - name: Build & install into MSYS workspace dist
        shell: msys2 {0}
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -e
          git clone --depth 1 --branch "${{ env.TCC_REF }}" "${{ env.TCC_REPO }}" tinycc
          cd tinycc
          mkdir -p "${GITHUB_WORKSPACE}/dist"
          ./configure --prefix="${GITHUB_WORKSPACE}/dist"
          make -j"$(getconf _NPROCESSORS_ONLN)"
          make install

          # copy to workspace root for artifact consistency
          if [ -f "${GITHUB_WORKSPACE}/dist/lib/libtcc.dll" ]; then
            cp -v "${GITHUB_WORKSPACE}/dist/lib/libtcc.dll" "${GITHUB_WORKSPACE}/libtcc.dll" || true
          fi

          rm -rf include lib || true
          cp -r "${GITHUB_WORKSPACE}/dist/include" "${GITHUB_WORKSPACE}/include" || true
          cp -r "${GITHUB_WORKSPACE}/dist/lib" "${GITHUB_WORKSPACE}/lib" || true

          ls -la "${GITHUB_WORKSPACE}/lib" || true
          ls -la "${GITHUB_WORKSPACE}/include" || true

      - name: Upload Windows (MinGW) artifact
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-windows-mingw
          path: |
            libtcc.dll
            include/
            lib/

  build-windows-msvc:
    name: Build on Windows (MSVC) - using win32\build-tcc.bat
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure CMake available (optional)
        run: choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=System"' || true
        shell: cmd

      - name: Build with MSVC using win32\build-tcc.bat and install into dist
        shell: pwsh
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -e

          # Clone already done by checkout, ensure repo dir exists
          cd $Env:GITHUB_WORKSPACE
          if (-not (Test-Path -Path "./tinycc")) {
            git clone --depth 1 --branch "${{ env.TCC_REF }}" "${{ env.TCC_REPO }}" tinycc
          }
          cd tinycc

          # use vswhere (should exist on hosted runners) to find VS install path
          $vswhere = Join-Path $Env:'ProgramFiles(x86)' 'Microsoft Visual Studio\Installer\vswhere.exe'
          if (-not (Test-Path $vswhere)) {
            Write-Error "vswhere not found at $vswhere"
            exit 1
          }
          $inst = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if (-not $inst) {
            Write-Error "Visual Studio with VC tools not found by vswhere"
            exit 1
          }
          $vcvars = Join-Path $inst 'VC\Auxiliary\Build\vcvarsall.bat'
          if (-not (Test-Path $vcvars)) {
            Write-Error "vcvarsall.bat not found at $vcvars"
            exit 1
          }

          # create predictable install target
          $dist = Join-Path $Env:GITHUB_WORKSPACE 'dist'
          if (-not (Test-Path $dist)) { New-Item -ItemType Directory -Path $dist | Out-Null }

          # Build using the repo-provided win32\build-tcc.bat as recommended in tcc-win32.txt.
          # Use MSVC toolchain (-c cl) and install into dist (-i <dir>) per the docs.
          Write-Output "Calling vcvars and build-tcc.bat (MSVC build) ..."
          # run the batch inside cmd so vcvars and build script run in same session
          $cmd = "& `"$vcvars`" x64 && win32\build-tcc.bat -c cl -i `"$dist`""
          Write-Output "Running: $cmd"
          cmd.exe /c $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "MSVC build (build-tcc.bat) failed with exit $LASTEXITCODE"
            exit $LASTEXITCODE
          }

          # After successful install, copy items into workspace root layout
          # copy libtcc.dll and libtcc.lib and include/lib folders
          if (Test-Path (Join-Path $dist 'lib\libtcc.dll')) {
            Copy-Item (Join-Path $dist 'lib\libtcc.dll') (Join-Path $Env:GITHUB_WORKSPACE 'libtcc.dll') -Force
          }
          if (Test-Path (Join-Path $dist 'lib\libtcc.lib')) {
            Copy-Item (Join-Path $dist 'lib\libtcc.lib') (Join-Path $Env:GITHUB_WORKSPACE 'libtcc.lib') -Force
          }

          if (Test-Path (Join-Path $dist 'include')) {
            Remove-Item -Recurse -Force (Join-Path $Env:GITHUB_WORKSPACE 'include') -ErrorAction SilentlyContinue
            Copy-Item -Recurse (Join-Path $dist 'include') (Join-Path $Env:GITHUB_WORKSPACE 'include')
          }
          if (Test-Path (Join-Path $dist 'lib')) {
            Remove-Item -Recurse -Force (Join-Path $Env:GITHUB_WORKSPACE 'lib') -ErrorAction SilentlyContinue
            Copy-Item -Recurse (Join-Path $dist 'lib') (Join-Path $Env:GITHUB_WORKSPACE 'lib')
          }

          Write-Output "dist/lib contents:"
          Get-ChildItem -Path (Join-Path $dist 'lib') -Recurse || Write-Output "none"

      - name: Upload Windows artifact (MSVC)
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-windows-msvc
          path: |
            libtcc.dll
            libtcc.lib
            include/
            lib/