name: Build libtcc (shared) artifacts
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_mob_branch:
        description: 'If "yes", build the mob branch/tag (TCC_TAG) for all matrix entries. If "no", use matrix.commit where provided.'
        required: false
        default: 'no'
        # UI shows this as a free-text string; keep to "yes" or "no" when dispatching.

permissions:
  contents: read

env:
  TCC_REPO: https://github.com/TinyCC/tinycc.git
  TCC_TAG: mob

concurrency:
  group: build-tcc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ################################################################
  # Host builds
  ################################################################
  build:
    name: Build on ${{ matrix.os_name }} / ${{ matrix.toolchain }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os_name: windows-msvc
            runner: windows-2025
            toolchain: msvc
            arch: x64
            short: win-msvc-x64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'
          - os_name: windows-mingw
            runner: windows-2025
            toolchain: mingw
            arch: x64
            short: win-mingw-x64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'
          - os_name: windows
            runner: windows-11-arm
            toolchain: msvc
            arch: arm64
            short: win-msvc-arm64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'
          - os_name: windows
            runner: windows-11-arm
            toolchain: mingw
            arch: arm64
            short: win-mingw-arm64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'

          - os_name: linux
            runner: ubuntu-22.04
            toolchain: gcc
            arch: x64
            short: linux-x64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'
          - os_name: linux
            runner: ubuntu-24.04-arm
            toolchain: gcc
            arch: arm64
            short: linux-arm64
            commit: 'f8bd136d198bdafe71342517fa325da2e243dc68'

          - os_name: macos
            runner: macos-26
            toolchain: gcc
            arch: arm64
            short: macos-arm64
            # Using the mob branch, this compiles but unsure if it works at runtime
            commit: ''
          - os_name: macos
            runner: macos-15-intel
            toolchain: gcc
            arch: x64
            short: macos-x64
            # Using the mob branch, this compiles but unsure if it works at runtime
            commit: ''

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Print matrix info
        run: |
          echo "TCC_REPO=$TCC_REPO"
          echo "OS: ${{ matrix.os_name }}"
          echo "Runner: ${{ matrix.runner }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "Arch: ${{ matrix.arch }}"
          echo "Matrix short: ${{ matrix.short }}"
          echo "Matrix commit (can be empty): '${{ matrix.commit }}'"
          echo "Dispatch build_mob_branch: '${{ github.event.inputs.build_mob_branch }}'"

      - name: Clone tinycc source (shallow)
        run: |
          rm -rf tcc-src
          # prefer non-interactive
          export GIT_TERMINAL_PROMPT=0

          # Decide which source to use:
          # Priority:
          # 1) If build_mob_branch == 'yes' -> use TCC_TAG (branch)
          # 2) Else if matrix.commit is non-empty -> use that commit
          # 3) Otherwise -> use TCC_TAG (branch)
          if [ "${{ github.event.inputs.build_mob_branch }}" = "yes" ]; then
            echo "FORCING build of branch/tag: ${TCC_TAG} (build_mob_branch=yes)"
            TCC_COMMIT=""
          elif [ -n "${{ matrix.commit }}" ] && [ "${{ matrix.commit }}" != "" ]; then
            echo "Using matrix-provided commit: '${{ matrix.commit }}'"
            TCC_COMMIT="${{ matrix.commit }}"
          else
            echo "No matrix commit provided; will clone branch/tag: ${TCC_TAG}"
            TCC_COMMIT=""
          fi

          if [ -n "${TCC_COMMIT:-}" ]; then
            echo "Fetching specific commit: ${TCC_COMMIT}"
            # create repo dir, add remote, fetch commit only (shallow)
            git init tcc-src
            cd tcc-src
            git remote add origin "${TCC_REPO}"
            # fetch only that commit (depth 1). --no-tags avoids fetching tags.
            if ! git fetch --no-tags --depth 1 origin "${TCC_COMMIT}"; then
              echo "git fetch failed for commit ${TCC_COMMIT}. You may need a different SHA or increase depth."
              git remote show origin || true
              exit 1
            fi
            git checkout FETCH_HEAD
          else
            echo "Cloning branch/tag: ${TCC_TAG}"
            git clone --branch "${TCC_TAG}" --depth 1 "${TCC_REPO}" tcc-src
          fi
        shell: bash

      ############ Windows MSVC ############
      - name: Set up Visual Studio Developer Command Prompt (MSVC)
        if: matrix.toolchain == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (MSVC) - run build-tcc.bat
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32
          rem use CALL so the caller continues after the .bat finishes
          call build-tcc.bat -i tccdir -t 64

      - name: Create libtcc.lib from .def (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32\tccdir
          if exist libtcc\libtcc.def (
            echo Generating libtcc.lib from libtcc\libtcc.def
            lib /DEF:libtcc\libtcc.def /OUT:libtcc.lib || (echo lib.exe failed & exit /b 1)
          ) else (
            echo "No libtcc.def at expected path"
            exit /b 1
          )

      - name: Prepare package folder & write build metadata (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: powershell
        run: |
          $pkg = "$env:GITHUB_WORKSPACE\package-${{ matrix.short }}"
          if (Test-Path $pkg) { Remove-Item -Recurse -Force $pkg -ErrorAction SilentlyContinue }
          New-Item -ItemType Directory -Path $pkg | Out-Null

          # Copy files into package
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\include -Destination (Join-Path $pkg "include")
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\lib -Destination (Join-Path $pkg "lib")
          if (Test-Path (Join-Path $pkg "lib\include")) { Remove-Item -Recurse -Force (Join-Path $pkg "lib\include") }
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.dll -Destination (Join-Path $pkg "libtcc.dll")
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.lib -Destination (Join-Path $pkg "libtcc.lib")
          if (Test-Path "tcc-src\win32\tccdir\libtcc\libtcc.def") { Copy-Item "tcc-src\win32\tccdir\libtcc\libtcc.def" -Destination (Join-Path $pkg "libtcc.def") }
          if (Test-Path "tcc-src\win32\tccdir\tcc.exe") { Copy-Item "tcc-src\win32\tccdir\tcc.exe" -Destination (Join-Path $pkg "tcc.exe") }

          # get actual commit hash if possible
          $commit = ""
          if (Test-Path "tcc-src\.git") {
            $commit = (& git -C tcc-src rev-parse HEAD) -as [string]
          } else {
            # fallback to tag name
            $commit = "${TCC_TAG}"
          }

          # Write metadata files
          $date = (Get-Date).ToString("o")  # ISO 8601, local time
          Set-Content -Path (Join-Path $pkg "build_source_hash") -Value $commit -NoNewline
          Set-Content -Path (Join-Path $pkg "build_on_date") -Value $date -NoNewline

          Write-Host "Wrote package to $pkg"

      ############ Windows MinGW ############
      - name: Setup MSYS2 (MinGW) on Windows
        if: matrix.toolchain == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils make

      - name: Build (MinGW) - run build-tcc.bat inside MSYS2
        if: matrix.toolchain == 'mingw'
        shell: bash
        env:
          MSYS2_PATH_TYPE: inherit
        run: |
          cd tcc-src/win32
          ./build-tcc.bat -i tccdir
          if [ ! -f "tccdir/libtcc.dll" ]; then
            echo "ERROR: libtcc.dll not found after MinGW build"
            ls -la
            exit 1
          fi

      - name: Package Windows artifact (MinGW)
        if: matrix.toolchain == 'mingw'
        shell: bash
        run: |
          PKG="$GITHUB_WORKSPACE/package-${{ matrix.short }}"
          rm -rf "$PKG"
          mkdir -p "$PKG"
          cp -r tcc-src/win32/tccdir/include "$PKG/include"
          cp -r tcc-src/win32/tccdir/lib "$PKG/lib"
          if [ -d "$PKG/lib/include" ]; then rm -rf "$PKG/lib/include"; fi
          cp tcc-src/win32/tccdir/libtcc.dll "$PKG/libtcc.dll" 2>/dev/null || true
          cp tcc-src/win32/tccdir/tcc.exe "$PKG/tcc.exe" 2>/dev/null || true
          if [ -f "tcc-src/win32/tccdir/libtcc/libtcc.def" ]; then cp "tcc-src/win32/tccdir/libtcc/libtcc.def" "$PKG/libtcc.def"; fi

          # determine actual commit if possible
          if [ -d tcc-src/.git ]; then
            COMMIT="$(git -C tcc-src rev-parse HEAD || echo ${TCC_TAG})"
          else
            COMMIT="${TCC_TAG}"
          fi
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo -n "$COMMIT" > "$PKG/build_source_hash"
          echo -n "$DATE" > "$PKG/build_on_date"

          echo "Wrote package to $PKG"

      ############ POSIX (Linux / macOS) ############
      - name: Install build prerequisites (Linux/macOS)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          if [ "$(uname -s)" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential autoconf automake libtool pkg-config zip
          else
            echo "macOS runner - assuming Xcode tools are available"
          fi
        shell: bash

      - name: Configure & build (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          STAGING="$PWD/staging"
          mkdir -p "$STAGING"
          ./configure --disable-static --prefix="$STAGING" --config-bcheck=yes --config-backtrace=yes
          make -j$(nproc || sysctl -n hw.ncpu || echo 2)
          make install
        shell: bash

      - name: Assemble artifact (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          PKG="$GITHUB_WORKSPACE/package-${{ matrix.short }}"
          rm -rf "$PKG"
          mkdir -p "$PKG"

          # headers
          if [ -d staging/lib/tcc/include ]; then
            cp -a staging/lib/tcc/include "$PKG/include"
          elif [ -d staging/include ]; then
            cp -a staging/include "$PKG/include"
          fi

          # runtime objects
          if [ -d staging/lib/tcc ]; then
            mkdir -p "$PKG/lib"
            cp -a staging/lib/tcc/* "$PKG/lib/" || true
            if [ -d "$PKG/lib/include" ]; then rm -rf "$PKG/lib/include"; fi
          fi

          if [ -f staging/lib/libtcc.so ]; then cp staging/lib/libtcc.so "$PKG/libtcc.so"; fi
          if [ -f staging/lib/libtcc.dylib ]; then cp staging/lib/libtcc.dylib "$PKG/libtcc.dylib"; fi
          if [ -f staging/lib/libtcc.a ]; then cp staging/lib/libtcc.a "$PKG/libtcc.a"; fi
          if [ -f staging/bin/tcc ]; then cp staging/bin/tcc "$PKG/tcc"; fi

          # commit + date metadata
          if [ -d ../tcc-src/.git ]; then
            COMMIT="$(git -C ../tcc-src rev-parse HEAD || echo ${TCC_TAG})"
          elif [ -d tcc-src/.git ]; then
            COMMIT="$(git -C tcc-src rev-parse HEAD || echo ${TCC_TAG})"
          else
            COMMIT="${TCC_TAG}"
          fi
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo -n "$COMMIT" > "$PKG/build_source_hash"
          echo -n "$DATE" > "$PKG/build_on_date"

          echo "Wrote package to $PKG"
        shell: bash

      ############ Upload ############
      - name: Upload artifact (package folder)
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-${{ matrix.short }}
          path: package-${{ matrix.short }}

  ################################################################
  # Container builds (Alpine etc.)
  ################################################################
  build-container:
    name: Build for ${{ matrix.container_image }} on ${{ matrix.runner }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.container_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: linux
            runner: ubuntu-22.04
            toolchain: gcc
            arch: x64
            short: linux-x64-alpine
            container_image: alpine:3.20
            commit: '696b765437b4a9213e3883ff416034daaebc891c'
          - os_name: linux
            runner: ubuntu-24.04-arm
            toolchain: gcc
            arch: arm64
            short: linux-arm64-alpine
            container_image: alpine:3.20
            commit: '696b765437b4a9213e3883ff416034daaebc891c'

    steps:
      - name: Install bash
        run: apk add --no-cache bash
        shell: sh

      - name: Install git
        run: apk add --no-cache git
        shell: sh

      # checking out current repo fails on because javascript actions on arm linux x64 aren't supported
      #- name: Checkout current repo
      #  uses: actions/checkout@v4
      #  with:
      #    submodules: true

      - name: Print matrix info
        run: |
          echo "TCC_REPO=$TCC_REPO"
          echo "OS: ${{ matrix.os_name }}"
          echo "Runner: ${{ matrix.runner }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "Arch: ${{ matrix.arch }}"

      - name: Clone tinycc source (shallow)
        run: |
          rm -rf tcc-src
          export GIT_TERMINAL_PROMPT=0

          if [ "${{ github.event.inputs.build_mob_branch }}" = "yes" ]; then
            echo "FORCING build of branch/tag: ${TCC_TAG} (build_mob_branch=yes)"
            TCC_COMMIT=""
          elif [ -n "${{ matrix.commit }}" ] && [ "${{ matrix.commit }}" != "" ]; then
            echo "Using matrix-provided commit: '${{ matrix.commit }}'"
            TCC_COMMIT="${{ matrix.commit }}"
          else
            echo "No matrix commit provided; will clone branch/tag: ${TCC_TAG}"
            TCC_COMMIT=""
          fi

          if [ -n "${TCC_COMMIT:-}" ]; then
            echo "Fetching specific commit: ${TCC_COMMIT}"
            git init tcc-src
            cd tcc-src
            git remote add origin "${TCC_REPO}"
            if ! git fetch --no-tags --depth 1 origin "${TCC_COMMIT}"; then
              echo "git fetch failed for commit ${TCC_COMMIT}. You may need a different SHA or increase depth."
              git remote show origin || true
              exit 1
            fi
            git checkout FETCH_HEAD
          else
            echo "Cloning branch/tag: ${TCC_TAG}"
            git clone --branch "${TCC_TAG}" --depth 1 "${TCC_REPO}" tcc-src
          fi
        shell: bash

      - name: Install build prerequisites (Linux/macOS)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          set -euo pipefail
          if command -v apk >/dev/null 2>&1; then
            apk add --no-cache build-base autoconf automake libtool pkgconfig zip
          elif command -v apt-get >/dev/null 2>&1; then
            if command -v sudo >/dev/null 2>&1; then
              sudo apt-get update
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential autoconf automake libtool pkg-config zip
            else
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential autoconf automake libtool pkg-config zip
            fi
          elif command -v brew >/dev/null 2>&1; then
            brew update
            brew install autoconf automake libtool pkg-config zip
          else
            echo "No supported package manager found (apk/apt-get/brew)."
            exit 1
          fi
        shell: sh

      - name: Configure & build (POSIX)
        run: |
          set -euo pipefail
          cd tcc-src
          STAGING="$PWD/staging"
          mkdir -p "$STAGING"
          ./configure --disable-static --prefix="$STAGING" --config-musl --config-bcheck=yes --config-backtrace=yes
          if command -v nproc >/dev/null 2>&1; then
            JOBS="$(nproc)"
          elif getconf _NPROCESSORS_ONLN >/dev/null 2>&1; then
            JOBS="$(getconf _NPROCESSORS_ONLN)"
          elif sysctl -n hw.ncpu >/dev/null 2>&1; then
            JOBS="$(sysctl -n hw.ncpu)"
          else
            JOBS=2
          fi
          make -j"$JOBS"
          make install
        shell: sh

      - name: Assemble artifact (POSIX)
        run: |
          set -euo pipefail
          cd tcc-src
          PKG="$GITHUB_WORKSPACE/package-${{ matrix.short }}"
          rm -rf "$PKG"
          mkdir -p "$PKG"
          if [ -d staging/lib/tcc/include ]; then
            cp -a staging/lib/tcc/include "$PKG/include"
          elif [ -d staging/include ]; then
            cp -a staging/include "$PKG/include"
          fi
          if [ -d staging/lib/tcc ]; then
            mkdir -p "$PKG/lib"
            cp -a staging/lib/tcc/* "$PKG/lib/" || true
            if [ -d "$PKG/lib/include" ]; then rm -rf "$PKG/lib/include"; fi
          fi
          if [ -f staging/lib/libtcc.so ]; then cp staging/lib/libtcc.so "$PKG/libtcc.so"; fi
          if [ -f staging/lib/libtcc.dylib ]; then cp staging/lib/libtcc.dylib "$PKG/libtcc.dylib"; fi
          if [ -f staging/lib/libtcc.a ]; then cp staging/lib/libtcc.a "$PKG/libtcc.a"; fi
          if [ -f staging/bin/tcc ]; then cp staging/bin/tcc "$PKG/tcc"; fi

          if [ -d ../tcc-src/.git ]; then
            COMMIT="$(git -C ../tcc-src rev-parse HEAD || echo ${TCC_TAG})"
          elif [ -d tcc-src/.git ]; then
            COMMIT="$(git -C tcc-src rev-parse HEAD || echo ${TCC_TAG})"
          else
            COMMIT="${TCC_TAG}"
          fi
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo -n "$COMMIT" > "$PKG/build_source_hash"
          echo -n "$DATE" > "$PKG/build_on_date"

          echo "Wrote package to $PKG"
        shell: sh

      - name: Install gh CLI
        run: |
          apk add --no-cache curl tar gzip
          curl -fsSL https://github.com/cli/cli/releases/download/v2.82.1/gh_2.82.1_linux_arm64.tar.gz \
            | tar -xz -C /tmp
          export PATH=$PATH:/tmp/gh_2.82.1_linux_arm64/bin

      - name: Upload artifact manually
        run: |
          gh auth login --with-token <<< "$GITHUB_TOKEN"
          gh release upload "temp-release" package-${{ matrix.short }}/* --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}