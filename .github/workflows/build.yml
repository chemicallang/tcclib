name: Build libtcc (shared) artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tcc_repo:
        description: 'Optional: override tinycc repository URL'
        required: false
        default: ''

permissions:
  contents: read

env:
  TCC_REPO: https://repo.or.cz/tinycc.git

concurrency:
  group: build-tcc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os_name }} / ${{ matrix.toolchain }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    env:
      # use workflow input when provided, otherwise fallback to default literal
      TCC_REPO: ${{ github.event.inputs.tcc_repo != '' && github.event.inputs.tcc_repo || 'https://repo.or.cz/tinycc.git' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: windows-msvc
            runner: windows-latest
            toolchain: msvc
            arch: x64
            short: win-msvc-x64

          - os_name: windows-mingw
            runner: windows-latest
            toolchain: mingw
            arch: x64
            short: win-mingw-x64

          - os_name: linux
            runner: ubuntu-latest
            toolchain: gcc
            arch: x86_64
            short: linux-x86_64

          - os_name: macos
            runner: macos-latest
            toolchain: gcc
            arch: x86_64
            short: macos-x86_64

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Print matrix info
        run: |
          echo "TCC_REPO=$TCC_REPO"
          echo "OS: ${{ matrix.os_name }}"
          echo "Runner: ${{ matrix.runner }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "Arch: ${{ matrix.arch }}"

      - name: Clone tinycc source (shallow)
        run: |
          rm -rf tcc-src
          git clone --depth 1 "$TCC_REPO" tcc-src
        shell: bash

      ############ Windows MSVC ############
      - name: Set up Visual Studio Developer Command Prompt (MSVC)
        if: matrix.toolchain == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (MSVC) - run build-tcc.bat
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32
          rem use CALL so the caller continues after the .bat finishes
          call build-tcc.bat -i tccdir -t 64

      - name: Create libtcc.lib from .def (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32\tccdir
          if exist libtcc\libtcc.def (
            echo Generating libtcc.lib from libtcc\libtcc.def
            lib /DEF:libtcc\libtcc.def /OUT:libtcc.lib || (echo lib.exe failed & exit /b 1)
          ) else (
            echo "No libtcc.def at expected path"
            exit /b 1
          )

      - name: Package Windows artifact (MSVC)   # create package folder in workspace (no pre-zip)
        if: matrix.toolchain == 'msvc'
        shell: powershell
        run: |
          $pkg="$env:GITHUB_WORKSPACE\package-${{ matrix.short }}"
          if (Test-Path $pkg) { Remove-Item -Recurse -Force $pkg -ErrorAction SilentlyContinue }
          New-Item -ItemType Directory -Path $pkg | Out-Null
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\include -Destination (Join-Path $pkg "include")
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\lib -Destination (Join-Path $pkg "lib")
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.dll -Destination (Join-Path $pkg "libtcc.dll")
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.lib -Destination (Join-Path $pkg "libtcc.lib")
          if (Test-Path "tcc-src\win32\tccdir\libtcc\libtcc.def") { Copy-Item "tcc-src\win32\tccdir\libtcc\libtcc.def" -Destination (Join-Path $pkg "libtcc.def") }
          if (Test-Path "tcc-src\win32\tccdir\tcc.exe") { Copy-Item "tcc-src\win32\tccdir\tcc.exe" -Destination (Join-Path $pkg "tcc.exe") }
          Write-Host "Wrote package to $pkg"

      ############ Windows MinGW ############
      - name: Setup MSYS2 (MinGW) on Windows
        if: matrix.toolchain == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          # Install gcc + binutils (windres in binutils), and make
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils make

      - name: Build (MinGW) - run build-tcc.bat inside MSYS2
        if: matrix.toolchain == 'mingw'
        shell: bash
        env:
          MSYS2_PATH_TYPE: inherit
        run: |
          cd tcc-src/win32
          ./build-tcc.bat -i tccdir
          if [ ! -f "tccdir/libtcc.dll" ]; then
            echo "ERROR: libtcc.dll not found after MinGW build"
            ls -la
            exit 1
          fi

      - name: Package Windows artifact (MinGW)
        if: matrix.toolchain == 'mingw'
        shell: bash
        run: |
          PKG="$GITHUB_WORKSPACE/package-${{ matrix.short }}"
          rm -rf "$PKG"
          mkdir -p "$PKG"
          cp -r tcc-src/win32/tccdir/include "$PKG/include"
          cp -r tcc-src/win32/tccdir/lib "$PKG/lib"
          cp tcc-src/win32/tccdir/libtcc.dll "$PKG/libtcc.dll" || true
          cp tcc-src/win32/tccdir/tcc.exe "$PKG/tcc.exe" 2>/dev/null || true
          if [ -f "tcc-src/win32/tccdir/libtcc/libtcc.def" ]; then cp "tcc-src/win32/tccdir/libtcc/libtcc.def" "$PKG/libtcc.def"; fi
          echo "Wrote package to $PKG"

      ############ POSIX (Linux / macOS) ############
      - name: Install build prerequisites (Linux/macOS)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          if [ "$(uname -s)" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential autoconf automake libtool pkg-config zip
          else
            echo "macOS runner - assuming Xcode tools are available"
          fi
        shell: bash

      - name: Configure & build (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          STAGING="$PWD/staging"
          mkdir -p "$STAGING"
          ./configure --disable-static --prefix="$STAGING"
          make -j$(nproc || sysctl -n hw.ncpu || echo 2)
          make install
        shell: bash

      - name: Assemble artifact (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          PKG="$GITHUB_WORKSPACE/package-${{ matrix.short }}"
          rm -rf "$PKG"
          mkdir -p "$PKG"
          # copy headers to package/include (prefer staging/lib/tcc/include)
          if [ -d staging/lib/tcc/include ]; then
            cp -a staging/lib/tcc/include "$PKG/include"
          elif [ -d staging/include ]; then
            cp -a staging/include "$PKG/include"
          fi
          # copy runtime objects to package/lib
          if [ -d staging/lib/tcc ]; then
            mkdir -p "$PKG/lib"
            cp -a staging/lib/tcc/* "$PKG/lib/" || true
            # remove duplicate include inside lib if present
            if [ -d "$PKG/lib/include" ]; then
              rm -rf "$PKG/lib/include"
            fi
          fi
          # copy shared library
          if [ -f staging/lib/libtcc.so ]; then
            cp staging/lib/libtcc.so "$PKG/libtcc.so"
          elif [ -f staging/lib/libtcc.dylib ]; then
            cp staging/lib/libtcc.dylib "$PKG/libtcc.dylib"
          fi
          # copy static archive if present
          if [ -f staging/lib/libtcc.a ]; then
            cp staging/lib/libtcc.a "$PKG/libtcc.a"
          fi
          # copy tcc binary if present
          if [ -f staging/bin/tcc ]; then
            cp staging/bin/tcc "$PKG/tcc"
          fi
          echo "Wrote package to $PKG"
        shell: bash

      ############ Upload ############
      - name: Upload artifact (package folder)
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-${{ matrix.short }}
          path: package-${{ matrix.short }}