name: Build libtcc (shared) artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tcc_repo:
        description: 'Optional: override tinycc repository URL'
        required: false
        default: ''

permissions:
  contents: read

env:
  # default upstream; override by workflow_dispatch input or repository / environment secrets
  TCC_REPO: https://repo.or.cz/tinycc.git

concurrency:
  group: build-tcc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os_name }} / ${{ matrix.toolchain }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: windows-msvc
            runner: windows-latest
            toolchain: msvc
            arch: x64
            short: win-msvc-x64

          - os_name: windows-mingw
            runner: windows-latest
            toolchain: mingw
            arch: x64
            short: win-mingw-x64

          - os_name: linux
            runner: ubuntu-latest
            toolchain: gcc
            arch: x86_64
            short: linux-x86_64

          - os_name: linux
            runner: ubuntu-latest
            toolchain: gcc
            arch: aarch64
            short: linux-aarch64

          - os_name: linux
            runner: ubuntu-latest
            toolchain: gcc
            arch: riscv64
            short: linux-riscv64

          - os_name: macos
            runner: macos-latest
            toolchain: gcc
            arch: x86_64
            short: macos-x86_64

          - os_name: macos
            runner: macos-latest
            toolchain: gcc
            arch: aarch64
            short: macos-aarch64

    steps:
      # Checkout this repo (the workflow / helper files)
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          submodules: true

      # Allow overriding the tcc repo via workflow_dispatch input
      - name: Resolve TCC_REPO
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.tcc_repo }}" != "" ]; then
            echo "Using tcc repo from workflow input: ${{ github.event.inputs.tcc_repo }}"
            echo "TCC_REPO=${{ github.event.inputs.tcc_repo }}" >> $GITHUB_ENV
          else
            echo "Using default TCC_REPO=${{ env.TCC_REPO }}"
          fi

      # Clone tinycc into tcc-src (shallow)
      - name: Clone tinycc source
        run: |
          echo "Cloning tinycc from $TCC_REPO into tcc-src"
          rm -rf tcc-src
          git clone --depth 1 "$TCC_REPO" tcc-src
        shell: bash

      - name: Print build matrix info
        run: |
          echo "OS: ${{ matrix.os_name }}"
          echo "Runner: ${{ matrix.runner }}"
          echo "Toolchain: ${{ matrix.toolchain }}"
          echo "Arch: ${{ matrix.arch }}"

      #### Windows MSVC path ####
      - name: Set up Visual Studio Developer Command Prompt (MSVC)
        if: matrix.toolchain == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (MSVC) - run build-tcc.bat
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32
          rem ensure 64-bit target
          build-tcc.bat -i tccdir -t 64

      - name: Create libtcc.lib from .def (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          cd tcc-src\win32\tccdir
          if exist libtcc\libtcc.def (
            echo Generating libtcc.lib from libtcc\libtcc.def
            lib /DEF:libtcc\libtcc.def /OUT:libtcc.lib || (echo lib.exe failed & exit /b 1)
          ) else (
            echo "No libtcc.def at tcc-src\win32\tccdir\libtcc\libtcc.def"
            exit /b 1
          )

      - name: Package Windows artifact (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: powershell
        run: |
          $out="artifact-${{ matrix.short }}.zip"
          Remove-Item -Force -Recurse package 2>$null || $null
          New-Item -ItemType Directory -Path package | Out-Null
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\include -Destination package\include
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\lib -Destination package\lib
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.dll -Destination package\libtcc.dll
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.lib -Destination package\libtcc.lib
          if (Test-Path "tcc-src\win32\tccdir\libtcc\libtcc.def") { Copy-Item "tcc-src\win32\tccdir\libtcc\libtcc.def" -Destination package\libtcc.def }
          if (Test-Path "tcc-src\win32\tccdir\tcc.exe") { Copy-Item "tcc-src\win32\tccdir\tcc.exe" -Destination package\tcc.exe }
          Compress-Archive -Path package\* -DestinationPath $out -Force

      #### Windows MinGW path ####
      - name: Setup MSYS2 (MinGW) on Windows
        if: matrix.toolchain == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc make mingw-w64-x86_64-windres

      - name: Build (MinGW) - run build-tcc.bat in MSYS2
        if: matrix.toolchain == 'mingw'
        shell: bash
        env:
          MSYS2_PATH_TYPE: inherit
        run: |
          cd tcc-src/win32
          ./build-tcc.bat -i tccdir
          if [ ! -f "tccdir/libtcc.dll" ]; then
            echo "ERROR: libtcc.dll not found after MinGW build"
            ls -la
            exit 1
          fi

      - name: Package Windows artifact (MinGW)
        if: matrix.toolchain == 'mingw'
        shell: powershell
        run: |
          $out="artifact-${{ matrix.short }}.zip"
          Remove-Item -Force -Recurse package 2>$null || $null
          New-Item -ItemType Directory -Path package | Out-Null
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\include -Destination package\include
          Copy-Item -Recurse -Path tcc-src\win32\tccdir\lib -Destination package\lib
          Copy-Item -Path tcc-src\win32\tccdir\libtcc.dll -Destination package\libtcc.dll
          if (Test-Path "tcc-src\win32\tccdir\tcc.exe") { Copy-Item "tcc-src\win32\tccdir\tcc.exe" -Destination package\tcc.exe }
          if (Test-Path "tcc-src\win32\tccdir\libtcc\libtcc.def") { Copy-Item "tcc-src\win32\tccdir\libtcc\libtcc.def" -Destination package\libtcc.def }
          Compress-Archive -Path package\* -DestinationPath $out -Force

      #### POSIX builds: Linux / macOS ####
      - name: Install build prerequisites (Linux/macOS)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          if [ "$(uname -s)" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential autoconf automake libtool pkg-config
          elif [ "$(uname -s)" = "Darwin" ]; then
            echo "macOS runner - assuming Xcode tools are available"
          fi

      - name: Configure & build (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          STAGING="$PWD/staging"
          mkdir -p "$STAGING"
          ./configure --disable-static --prefix="$STAGING"
          make -j$(nproc || sysctl -n hw.ncpu || echo 2)
          make install

      - name: Assemble artifact (POSIX)
        if: matrix.toolchain == 'gcc' && runner.os != 'Windows'
        run: |
          cd tcc-src
          OUTDIR="$PWD/package"
          rm -rf "$OUTDIR"
          mkdir -p "$OUTDIR"
          if [ -d staging/lib/tcc/include ]; then
            cp -a staging/lib/tcc/include "$OUTDIR/include"
          elif [ -d staging/include ]; then
            cp -a staging/include "$OUTDIR/include"
          fi
          if [ -d staging/lib/tcc ]; then
            mkdir -p "$OUTDIR/lib"
            cp -a staging/lib/tcc/* "$OUTDIR/lib/" || true
          fi
          if [ -f staging/lib/libtcc.so ]; then
            cp staging/lib/libtcc.so "$OUTDIR/libtcc.so"
          elif [ -f staging/lib/libtcc.dylib ]; then
            cp staging/lib/libtcc.dylib "$OUTDIR/libtcc.dylib"
          fi
          if [ -f staging/lib/libtcc.a ]; then
            cp staging/lib/libtcc.a "$OUTDIR/libtcc.a"
          fi
          if [ -f staging/bin/tcc ]; then
            cp staging/bin/tcc "$OUTDIR/tcc"
          fi
          ART="artifact-${{ matrix.short }}.zip"
          (cd "$OUTDIR" && zip -r "../$ART" .)

      #### Final upload ####
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libtcc-${{ matrix.short }}
          path: artifact-${{ matrix.short }}.zip